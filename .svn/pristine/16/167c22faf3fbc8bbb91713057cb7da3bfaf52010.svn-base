using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualBasic;

namespace MyUtility
{
    public static class MyString
    {
        /// <summary>
        /// sql语句过滤防注入 扩展方法
        /// </summary>
        /// <param name="source">sql语句</param>
        /// <returns>返回sql</returns>
        public static string FilterSql(this string source)
        {
            //单引号替换成两个单引号
            
            source = source.Replace("'", "''");
            source = source.Replace("\"", "“");
            source = source.Replace("|", "｜");
            //半角封号替换为全角封号，防止多语句执行
            source = source.Replace(";", "；");

            //半角括号替换为全角括号
            source = source.Replace("(", "（");
            source = source.Replace(")", "）");

            /**/
            ///////////////要用正则表达式替换，防止字母大小写得情况////////////////////

            //去除执行存储过程的命令关键字
            source = source.Replace("Exec", "");
            source = source.Replace("Execute", "");

            //去除系统存储过程或扩展存储过程关键字
            source = source.Replace("xp_", "x p_");
            source = source.Replace("sp_", "s p_");

            //防止16进制注入
            source = source.Replace("0x", "0 x");

            return source;

        }

        /// <summary>
        /// 字符串转日期,如空返回null值 扩展方法
        /// </summary>
        /// <param name="s_date">字符串日期</param>
        /// <returns>日期</returns>
        public static Nullable<DateTime> ToDate(this string s_date)
        {
            if (String.IsNullOrEmpty(s_date))
            {
                return null;
            }
            else
            {
                return DateTime.Parse(s_date);
            }
        }

        /// <summary>
        /// 字符串转数字decimal,如空返回null值 扩展方法
        /// </summary>
        /// <param name="s_date">字符串数字decimal</param>
        /// <returns>数字decimal</returns>
        public static Nullable<Decimal> ToDeciaml(this string s_decimal)
        {
            if (String.IsNullOrEmpty(s_decimal))
            {
                return null;
            }
            else
            {
                return Decimal.Parse(s_decimal);
            }
        }

        public static int? ToInt(this string s_int) {
            if (String.IsNullOrEmpty(s_int)) {
                return null;
            }
            else {
                return int.Parse(s_int);
            }
        }

        public static string ToFmt(this string s_source,Func<string,bool> fun)
        {
            bool b = fun(s_source);
            if (b)
            {
                return s_source;
            }
            else
            {
                return "";
            }
        }

        /// <summary>
        /// 语言繁简转化
        /// </summary>
        /// <param name="s_souce"></param>
        /// <param name="lan">"gb","big"</param>
        /// <returns></returns>
		public static string ToLanguage(this string s_souce, EnumLanguage type)
        {
			if (type == EnumLanguage.Gb)
            {
                return Strings.StrConv(s_souce, VbStrConv.SimplifiedChinese);
            }
			else if (type == EnumLanguage.Big)
            {
                return Strings.StrConv(s_souce, VbStrConv.TraditionalChinese);
            }
            else
            {
                return s_souce;
            }
        }

		public enum EnumLanguage {
			/// <summary>
			/// 简体
			/// </summary>
			Gb=0,
			/// <summary>
			/// 繁体
			/// </summary>
			Big=2
		}
    }
}
