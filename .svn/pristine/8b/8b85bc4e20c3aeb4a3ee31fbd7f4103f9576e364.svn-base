using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Autofac;
using Autofac.Extensions.DependencyInjection;
using AutoMapper;
using DDD.Data;
using DDD_core.AutoFac;
using DDD_core.Filters;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using MyUtility.Attribute;

namespace DDD_core
{
    public class Startup
    {
        private string sqlServer { get; set; }
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
            //创建config的builder
            var builder = new ConfigurationBuilder();
            //设置配置文件所在的路径加载配置文件信息
            builder.SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json");
            var config = builder.Build();
            sqlServer = config["sqlconnettingstring"];
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public IServiceProvider ConfigureServices(IServiceCollection services)
        {

            //注册MVC服务
            services.AddMvc(option => {
                //全局过滤器,验证身份
                //option.Filters.Add(typeof(UserAuthorizeAttribute));
            });

            services.AddHttpContextAccessor();

            //注册EFcore,限定创建单例模式的上下文对象
            services.AddDbContext<oaEntities>(options => options.UseSqlServer(sqlServer),
                ServiceLifetime.Singleton);

            //以下开始注册AutoFac
            ContainerBuilder builder = new ContainerBuilder();
            builder.Populate(services);

            builder.RegisterModule<AutofacConfig>();

            IContainer container = builder.Build();



            return new AutofacServiceProvider(container);

        }
        

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }
            DefaultFilesOptions options = new DefaultFilesOptions();
            options.DefaultFileNames.Add("Login.cshtml");    //将index.html改为需要默认起始页的文件名.
            app.UseDefaultFiles(options);

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Login}/{id?}");
            });

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                  name: "areas",
                  template: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
                );
            });

        }


    }
}
