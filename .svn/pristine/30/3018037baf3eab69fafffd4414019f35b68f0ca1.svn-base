using Autofac;
using Autofac.Extras.DynamicProxy;
using DDD.Service.AOP;
using DDD_core.Filters;
using MyUtility.Interface;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace DDD_core.AutoFac
{
    public class AutofacConfig:Autofac.Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            //base.Load(builder);
            //重写Autofac管道中的Load方法，在这里注入注册的内容
            //builder.RegisterType<ServiceA>().As<IServiceA>().InstancePerLifetimeScope();

            //以程序集形式注册
            //获取以My开头的dll程序集的集合利用Directory.GetFiles获取dll,利用Assembly.LoadFrom委托select来对刚才的每个dll文件进行获取集合
            Assembly[] assemblies = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory, "DDD*.dll").Select(Assembly.LoadFrom).ToArray();
            //注册所有实现了 IDependency 接口的类型
            Type baseType = typeof(IDependency);
            //获取程序集
            //方法一
            //var asm = Assembly.Load("MyMvcCore");
            //方法二
            //var asm = AssemblyLoadContext.Default.LoadFromAssemblyName(new AssemblyName("MyMvcCore"));
            builder.RegisterAssemblyTypes(assemblies)
                .Where(b => !b.IsAbstract && baseType.IsAssignableFrom(b))//IsAssignableFrom是否实现了基类的接口这里指的是IDependency
                .AsSelf().AsImplementedInterfaces().PropertiesAutowired().InstancePerLifetimeScope();

            builder.Register(c => new CacheAOP());
            var ServiceClass = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory, "DDD.Service.dll").Select(Assembly.LoadFrom).ToArray();
            builder.RegisterAssemblyTypes(ServiceClass)
                  .Where(type =>
                   typeof(IDependency).IsAssignableFrom(type) && !type.GetTypeInfo().IsAbstract)
                  .AsImplementedInterfaces()
                  .InstancePerLifetimeScope().EnableInterfaceInterceptors().InterceptedBy(typeof(CacheAOP));
        }
        
    }
}
