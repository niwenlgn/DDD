/**********************************************************************
 * 文件名：        LinqSort.cs
 * 描述：          Linq To Sql查询排序类
 * 作者:           Sammy
 * 日期:           2016-09-26
 * 说明：          对linq to sql查询进行扩展可以进行排序
**********************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Linq.Expressions;
using System.Reflection;

namespace MyUtility
{
	public static class LinqSortExtend
    {
        /// <summary>
        /// Linq动态排序
        /// </summary>
        /// <typeparam name="T">T</typeparam>
        /// <param name="source">要排序的数据源</param>
        /// <param name="value">排序依据（加空格）排序方式</param>
        /// <returns>IOrderedQueryable</returns>
        public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, string value)
        {
            string[] arr = value.Split('$');
            string Name = arr[1].ToUpper() == "DESC" ? "OrderByDescending" : "OrderBy";
            return ApplyOrder<T>(source, arr[0], Name);
        }
        /// <summary>
        /// Linq动态排序再排序
        /// </summary>
        /// <typeparam name="T">T</typeparam>
        /// <param name="source">要排序的数据源</param>
        /// <param name="value">排序依据（加空格）排序方式</param>
        /// <returns>IOrderedQueryable</returns>
        public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string value)
        {
            string[] arr = value.Split(' ');
            string Name = arr[1].ToUpper() == "DESC" ? "ThenByDescending" : "ThenBy";
            return ApplyOrder<T>(source, arr[0], Name);
        }
        static IOrderedQueryable<T> ApplyOrder<T>(IQueryable<T> source, string property, string methodName)
        {
            Type type = typeof(T);
            ParameterExpression arg = Expression.Parameter(type, "a");
            PropertyInfo pi = type.GetProperty(property);
            Expression expr = Expression.Property(arg, pi);
            type = pi.PropertyType;
            Type delegateType = typeof(Func<,>).MakeGenericType(typeof(T), type);
            LambdaExpression lambda = Expression.Lambda(delegateType, expr, arg);
            object result = typeof(Queryable).GetMethods().Single(
            a => a.Name == methodName
            && a.IsGenericMethodDefinition
            && a.GetGenericArguments().Length == 2
            && a.GetParameters().Length == 2).MakeGenericMethod(typeof(T), type).Invoke(null, new object[] { source, lambda });
            return (IOrderedQueryable<T>)result;
        }

		/// <summary>
		/// Linq动态排序
		/// </summary>
		/// <typeparam name="T">T</typeparam>
		/// <param name="source">要排序的数据源</param>
		/// <param name="value">排序依据（加空格）排序方式</param>
		/// <returns>IOrderedQueryable</returns>
		//public static IOrderedQueryable<T> OrderBy<T>(this IEnumerable<T> source, string value) {
		//	string[] arr = value.Split('$');
		//	string Name = arr[1].ToUpper() == "DESC" ? "OrderByDescending" : "OrderBy";
		//	return ApplyOrder<T>(source.AsQueryable(), arr[0], Name);
		//}
    }
}