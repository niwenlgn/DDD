using DDD.IRepository;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DDD.Repository
{
    public class BaseRepository<T> : IBaseRepository<T>
        where T : class
    {
        protected DbContext context;
        protected DbSet<T> dbSet;
        protected bool isCommit = true;//是否自动提交 默认为自动提交
        protected T entity;

        public bool IsCommit
        {
            //    get{
            //        return isCommit;
            //}
            set
            {
                isCommit = value;
            }
        }

        //通过构造函数注入 unitofwork 获取同一个上下文
        public BaseRepository(IUnitOfWork uow)
        {
            context = (uow as UnitOfWork)._dbcontext;
            dbSet = context?.Set<T>();
        }

        /// <summary>
		/// 获取所有实体对象
		/// </summary>
		/// <param name="AsTrack">有无跟踪状态</param>
		/// <returns></returns>
		public IQueryable<T> GetAll(bool AsTrack = false)
        {
            if (AsTrack)
            {
                return dbSet;
            }
            else
            {
                return dbSet.AsNoTracking();
            }
        }

        /// <summary>
        /// 获取所有实体对象,无跟踪状态
        /// </summary>
        public IQueryable<T> Entities
        {
            get { return dbSet.AsNoTracking(); }
        }

        /// <summary>
        /// 根据Lamda表达式来查询实体对象
        /// </summary>
        /// <param name="whereLambda"></param>
		/// <param name="AsTrack">无跟踪查询 查询出来的结果无法直接修改</param>
        /// <returns></returns>
		public IQueryable<T> Where(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, bool AsTrack = false)
        {
            if (AsTrack)
            {
                return dbSet.Where(whereLambda);
            }
            else
            {
                return dbSet.AsNoTracking().Where(whereLambda);
            }
        }

        #region 同步方法实现
        /// <summary>
        /// 获取所有实体数量
        /// </summary>
        /// <returns></returns>
        public int Count()
        {
            return dbSet.Count();
        }

        /// <summary>
        /// 根据表达式获取实体数量
        /// </summary>
        /// <param name="whereLambda"></param>
        /// <returns></returns>
        public int Count(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)
        {
            return dbSet.Where(whereLambda).Count();
        }

        /// <summary>
        /// 实体对象新增
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Add(T model)
        {
            dbSet.Add(model);
            //int i_flag = isCommit ? context.SaveChanges() : 1;
            int i_flag = context.SaveChanges();
            return i_flag;
        }

        /// <summary>
        /// 实体对象修改
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Update(T model)
        {
            var entry = context.Entry<T>(model);
            dbSet.Attach(model);
            //int i_flag = isCommit ? context.SaveChanges() : 1;
            int i_flag = context.SaveChanges();
            return i_flag;
        }

        /// <summary>
        /// 实体对象根据字段修改
        /// </summary>
        /// <param name="model"></param>
        /// <param name="proName"></param>
        /// <returns></returns>
        public int Update(T model, params string[] proName)
        {
            var entry = context.Entry<T>(model);
            foreach (string s in proName)
            {
                entry.Property(s).IsModified = true;
            }
            //int i_flag = isCommit ? context.SaveChanges() : 1;
            int i_flag = context.SaveChanges();
            return i_flag;
        }

        /// <summary>
        /// 实体对象删除
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns
        public int Delete(T model)
        {
            //var entry = context.Entry<T>(model);
            //entry.State = EntityState.Deleted;
            dbSet.Attach(model);
            dbSet.Remove(model);
            //int i_flag = isCommit ? context.SaveChanges() : 1;
            int i_flag = context.SaveChanges();
            return i_flag;
        }

        /// <summary>
        /// 删除复核条件的多个实体对象
        /// </summary>
        /// <param name="whereLambda"></param>
        /// <returns></returns>
        public int Delete(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)
        {
            var enties = dbSet.Where(whereLambda).ToList();
            foreach (var item in enties)
            {
                dbSet.Remove(item);
            }
            //int i_flag = isCommit ? context.SaveChanges() : 1;
            int i_flag = context.SaveChanges();
            return i_flag;
        }

        /// <summary>
		/// 根据键值查找返回单个实体 无跟踪查询
        /// </summary>
        /// <param name="keys"></param>
        /// <returns></returns>
        public T Find(params object[] keys)
        {
            return dbSet.Find(keys);
        }

        /// <summary>
        /// 根据表达式查找返回单个实体
        /// </summary>
        /// <param name="whereLambda"></param>
		/// <param name="AsTrack">无跟踪查询 查询出来的结果无法直接修改</param>
        /// <returns></returns>
		public T Find(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, bool AsTrack = false)
        {
            if (AsTrack)
            {
                return dbSet.FirstOrDefault(whereLambda);
            }
            else
            {
                return dbSet.AsNoTracking().FirstOrDefault(whereLambda);
            }
        }

        #endregion

        #region 异步方法实现

        /// <summary>
        /// 获取所有实体数量 异步方法
        /// </summary>
        /// <returns></returns>
        public async Task<int> CountAsync()
        {
            return await dbSet.CountAsync();
        }

        /// <summary>
        /// 根据表达式获取实体数量
        /// </summary>
        /// <param name="whereLambda"></param>
        /// <returns></returns>
        public async Task<int> CountAsync(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)
        {
            return await dbSet.Where(whereLambda).CountAsync();
        }

        /// <summary>
        /// 实体对象新增 异步方法
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public async Task<int> AddAsync(T model)
        {
            dbSet.Add(model);
            int i_flag = isCommit ? await context.SaveChangesAsync() : 0;
            return i_flag;
        }

        /// <summary>
        /// 实体对象修改 异步方法
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public async Task<int> UpdateAsync(T model)
        {
            var entry = context.Entry<T>(model);
            dbSet.Attach(model);
            int i_flag = isCommit ? await context.SaveChangesAsync() : 0;
            return i_flag;
        }

        /// <summary>
        /// 实体对象根据字段修改 异步方法
        /// </summary>
        /// <param name="model"></param>
        /// <param name="proName"></param>
        /// <returns></returns>
        public async Task<int> UpdateAsync(T model, params string[] proName)
        {
            var entry = context.Entry<T>(model);
            foreach (string s in proName)
            {
                entry.Property(s).IsModified = true;
            }
            int i_flag = isCommit ? await context.SaveChangesAsync() : 0;
            return i_flag;
        }

        /// <summary>
        /// 实体对象删除 异步方法
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns
        public async Task<int> DeleteAsync(T model)
        {
            //var entry = context.Entry<T>(model);
            //entry.State = EntityState.Deleted;
            dbSet.Attach(model);
            dbSet.Remove(model);
            int i_flag = isCommit ? await context.SaveChangesAsync() : 0;
            return i_flag;
        }

        /// <summary>
        /// 删除复核条件的多个实体对象 异步方法
        /// </summary>
        /// <param name="whereLambda"></param>
        /// <returns></returns>
        public async Task<int> DeleteAsync(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)
        {
            var enties = dbSet.Where(whereLambda).ToList();
            foreach (var item in enties)
            {
                dbSet.Remove(item);
            }
            int i_flag = isCommit ? await context.SaveChangesAsync() : 0;
            return i_flag;
        }

        /// <summary>
        /// 根据键值查找返回单个实体 异步方法
        /// </summary>
        /// <param name="keys"></param>
        /// <returns></returns>
        public async Task<T> FindAsync(params object[] keys)
        {
            return await dbSet.FindAsync(keys);
        }

        /// <summary>
        /// 根据表达式查找返回单个实体 异步方法
        /// </summary>
        /// <param name="whereLambda"></param>
        /// <returns></returns>
        public async Task<T> FindAsync(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)
        {
            return await dbSet.FirstOrDefaultAsync(whereLambda);
        }

        #endregion
    }
}
