using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace MyUtility
{
    public class SQLServerHelpper
    {
        private static string connStr;
        private static SqlConnection cnn;
        /// <summary>
        /// SQLserver帮助类
        /// </summary>
        public SQLServerHelpper()
        {
            connStr = new Config.Configs().GetConfigValue("sqlconnettingstring");
            cnn = new SqlConnection(connStr);
        }
        /// <summary>
        /// 释放掉SqlConnection
        /// </summary>
        ~SQLServerHelpper()
        {
            if (cnn != null) Close();
        }
        /// <summary>
        /// SQLserver帮助类
        /// </summary>
        /// <param name="connString">链接字符串</param>
        public SQLServerHelpper(string connString)
        {
            if (string.IsNullOrEmpty(connString)) connStr = new Config.Configs().GetConfigValue("sqlconnettingstring");
            else
            {
                connStr = connString;
                cnn = new SqlConnection(connStr);
            }
        }
        /// <summary>
        /// 执行增删改的sql
        /// </summary>
        /// <param name="sql">sql命令</param>
        /// <returns>受影响的行数</returns>
        public static int ExecuteNonQuery(string sql)
        {
            Open();
            SqlCommand command = new SqlCommand(sql, cnn);
            int result = command.ExecuteNonQuery();
            cnn.Close();
            return result;
        }
        /// <summary>
        /// 执行多条SQL语句，实现数据库事务
        /// </summary>
        /// <param name="SQLStringList"></param>
        /// <returns></returns>
        public static int ExecuteSqlTran(List<string> SQLStringList)
        {
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();
                SqlCommand command = new SqlCommand
                {
                    Connection = conn
                };
                SqlTransaction tx = conn.BeginTransaction();
                command.Transaction = tx;
                try
                {
                    int count = 0;
                    for (int n = 0; n < SQLStringList.Count; n++)
                    {
                        string strsql = SQLStringList[n];
                        if (strsql.Trim().Length > 1)
                        {
                            command.CommandText = strsql;
                            count += command.ExecuteNonQuery();
                        }
                    }
                    tx.Commit();
                    return count;
                }
                catch
                {
                    tx.Rollback();
                    return 0;
                }
            }
        }
        /// <summary>
        /// 返回sql执行结果
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public static object ExecuteScalar(string sql)
        {
            Open();
            SqlCommand command = new SqlCommand(sql, cnn);
            object result = command.ExecuteScalar();
            cnn.Close();
            return result;
        }
        /// <summary>
        /// 返回数据表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public static DataTable GetDataTable(string sql)
        {
            SqlDataAdapter adapter = new SqlDataAdapter(sql, cnn);
            DataSet ds = new DataSet();
            adapter.Fill(ds);
            cnn.Close();
            return ds.Tables[0];
        }
        /// <summary>
        /// 使用存储过程查询数据结果
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="paras"></param>
        /// <returns></returns>
        public static DataTable GetDataTable(string procName, SqlParameter[] paras = null)
        {
            Open();
            SqlCommand command = new SqlCommand(procName, cnn);
            command.CommandType = CommandType.StoredProcedure;

            if (paras != null)
            {
                command.Parameters.AddRange(paras);
            }
            SqlDataAdapter adapter = new SqlDataAdapter(command);
            DataSet ds = new DataSet();
            adapter.Fill(ds);
            Close();
            return ds.Tables[0];
        }
        /// <summary>
        /// 使用存储过程执行增删改
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="paras"></param>
        /// <returns>受影响条数</returns>
        public static int ExecuteNonQuery(string procName, SqlParameter[] paras)
        {
            Open();
            SqlCommand command = new SqlCommand(procName, cnn);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddRange(paras);

            int result = command.ExecuteNonQuery();
            Close();

            return result;
        }

        /// <summary>
        /// 打开数据库
        /// </summary>
        private static void Open()
        {
            if (cnn.State == ConnectionState.Broken || cnn.State == ConnectionState.Open)
            {
                cnn.Close();
            }
            cnn.Open();
        }

        /// <summary>
        /// 关闭数据库
        /// </summary>
        private static void Close()
        {
            cnn.Close();
        }
    }
}
